// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.Entity = (function(superClass) {
    extend(Entity, superClass);

    function Entity(image, x, y, map) {
      Entity.__super__.constructor.call(this, image, x, y, map);
      this.hp = 1;
      this.maxhp = this.hp;
      this.isEntity = true;
      this.speed = 10;
      this.mainWeapon = null;
      this.image.game.physics.arcade.enable(this.image);
      this.image.body.collideWorldBounds = true;
      this.pixelSpeed = this.map.box.properties.globSpeed;
      this.image.body.immovable = true;
      this.render();
      this.hitSprite = this.image.game.add.image(this.image.x, this.image.y, 'hit');
      this.hitSprite.visible = false;
    }

    Entity.prototype.move = function(x, y) {
      var entity, k, len, ref;
      if (!((0 <= x && x < this.map.level[0].width) && (0 <= y && y < this.map.level[0].height)) || this.map.map.getTile(x, y, 1)) {
        return;
      }
      ref = this.map.entitiesL;
      for (k = 0, len = ref.length; k < len; k++) {
        entity = ref[k];
        if (entity.posx === x && entity.posy === y) {
          return this.attack(entity);
        }
      }
      if (!this.isPlayer && this.map.player.posx === x && this.map.player.posy === y) {
        return this.attack(this.map.player);
      }
      this.posx = x;
      this.posy = y;
      this.render();
      this.hitSprite.x = this.image.x;
      return this.hitSprite.y = this.image.y;
    };


    /*
    The AI of the entity,
    For now, simply chases the player if he's near enough
     */

    Entity.prototype.act = function() {
      var coor, curr, i, j, k, l, ref, ref1, ref2, ref3, ref4, x, y;
      x = this.posx;
      y = this.posy;
      curr = this.map.DKMap[x][y];
      coor = {
        x: x,
        y: y
      };
      for (i = k = ref = x - 1, ref1 = x + 1; ref <= ref1 ? k <= ref1 : k >= ref1; i = ref <= ref1 ? ++k : --k) {
        for (j = l = ref2 = y - 1, ref3 = y + 1; ref2 <= ref3 ? l <= ref3 : l >= ref3; j = ref2 <= ref3 ? ++l : --l) {
          if ((0 <= (ref4 = this.map.DKMap[i][j]) && ref4 < curr)) {
            curr = this.map.DKMap[i][j];
            coor = {
              x: i,
              y: j
            };
          }
        }
      }
      return this.move(coor.x, coor.y);
    };

    Entity.prototype.attack = function(enemy) {
      if (r2d6() > 6) {
        return enemy.damage(1);
      }
    };

    Entity.prototype.damage = function(hp) {
      this.hitSprite.x = this.image.x;
      this.hitSprite.y = this.image.y;
      this.hitSprite.visible = true;
      window.setTimeout(function(sprite) {
        return sprite.visible = false;
      }, 300, this.hitSprite);
      this.hp -= hp;
      if (this.hp <= 0) {
        return this.die();
      }
    };

    Entity.prototype.heal = function(hp) {
      this.hp += hp;
      if (this.hp > this.maxhp) {
        return this.hp = this.maxhp;
      }
    };

    Entity.prototype.die = function() {
      this.map.entitiesL.splice(this.map.entitiesL.indexOf(this), 1);
      return this.image.destroy(true);
    };

    Entity.prototype.interact = function(direction) {
      var en, f, toInteractX, toInteractY;
      toInteractX = this.posx;
      toInteractY = this.posy;
      switch (direction) {
        case "up":
          toInteractY--;
          break;
        case "down":
          toInteractY++;
          break;
        case "left":
          toInteractX--;
          break;
        case "right":
          toInteractX++;
      }
      f = function(en) {
        return en.posx === toInteractX && en.posy === toInteractY;
      };
      en = _.find(this.map.entitiesL, f);
      if (en != null) {
        return this.attack(en);
      }
    };

    return Entity;

  })(Thing);

}).call(this);

//# sourceMappingURL=entities.js.map
