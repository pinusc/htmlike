// Generated by CoffeeScript 1.9.3
(function() {
  var create, render, update;

  window.boxx = null;

  this.Box = (function() {
    function Box() {
      var height, main_state, width;
      width = $("#main").width();
      height = $("#main").height();
      this.properties = new Properties();
      this.m = new map(this);
      this.game = new Phaser.Game(width, height, Phaser.CANVAS, 'main', load_status);
      main_state = {
        create: create,
        update: update,
        render: render
      };
      this.game.state.add('main_state', main_state);
      this.toDebug = false;
      this.dbl = [];
    }

    Box.prototype.renderDebug = function() {
      var x;
      x = 15;
      this.game.debug.text("DEBUG:", 10, x);
      _.each(this.dbl, function(m) {
        x += 15;
        return this.game.debug.text(m.text, 10, x, m.color);
      }, this);
      return this.dbl = [];
    };

    Box.prototype.debug = function(text, color) {
      return this.dbl.push({
        text: text,
        color: color
      });
    };

    Box.prototype.onResize = function() {
      var box, height, width;
      box = boxx;
      width = $("#main").width();
      height = $("#main").height();
      box.game.width = width;
      box.game.height = height;
      box.game.camera.setSize(width, height);
      return box.game.scale.setSize();
    };

    return Box;

  })();

  $(document).ready(function() {
    window.boxx = new Box();
    return $(window).resize(boxx.onResize);
  });

  create = function() {
    var jMap;
    jMap = this.game.jMap;
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    boxx.m.loadMap(jMap);
    this.game.camera.follow(boxx.m.player.image);
    boxx.m.player.fixedToCamera = true;
    boxx.input = new Input(boxx, boxx.game);
    createUI(boxx);
    boxx.m.time.myUpdate();
    return this.game.paused = false;
  };

  update = function() {
    var a;
    a = boxx.game.physics.arcade.collide(boxx.m.player.image, boxx.m.level[1]);
    _.each(boxx.m.entitiesL, function(entity) {
      return boxx.game.physics.arcade.collide(boxx.m.player.image, entity.image);
    });
    boxx.m.player.image.body.velocity.set(0);
    boxx.input.handleInput();
    return boxx.m.player.update();
  };

  render = function() {
    var box;
    box = boxx;
    if (box.toDebug) {
      box.debug("playerHP: " + box.m.player.hp);
      box.debug("desktop: " + box.game.device.desktop);
      if (box.m.entitiesL[0]) {
        box.debug("Wolf HP: " + box.m.entitiesL[0].hp);
      }
      box.debug(box.game.time.fps || '--', "#00ff00");
      box.debug("fpsMin: " + box.game.time.fpsMin || '--', "#00ff00");
      box.game.debug.body(box.m.player);
      return box.renderDebug();
    }
  };

}).call(this);

//# sourceMappingURL=index.js.map
