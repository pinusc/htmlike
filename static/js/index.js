// Generated by CoffeeScript 1.9.3
(function() {
  var boxx, createGame, preload, render, update;

  boxx = null;

  window.yellow_border = null;

  this.Box = (function() {
    function Box() {
      var height, width;
      width = $("#main").width();
      height = $("#main").height();
      this.properties = new Properties();
      this.m = new map(this);
      this.game = new Phaser.Game(width, height, Phaser.CANVAS, 'main', {
        preload: preload,
        create: createGame,
        update: update,
        render: render
      });
      this.toDebug = false;
      this.dbl = [];
      this.input = new Input(this);
    }

    Box.prototype.renderDebug = function() {
      var x;
      x = 15;
      this.game.debug.text("DEBUG:", 10, x);
      _.each(this.dbl, function(m) {
        x += 15;
        return this.game.debug.text(m.text, 10, x, m.color);
      }, this);
      return this.dbl = [];
    };

    Box.prototype.debug = function(text, color) {
      return this.dbl.push({
        text: text,
        color: color
      });
    };

    Box.prototype.onResize = function() {
      var box, height, width;
      box = boxx;
      width = $("#main").width();
      height = $("#main").height();
      box.game.width = width;
      box.game.height = height;
      box.game.camera.setSize(width, height);
      return box.game.scale.setSize();
    };

    Box.prototype.myCreate = function(jMap) {
      this.game.physics.startSystem(Phaser.Physics.P2JS);
      this.m.loadMap(jMap);
      this.game.camera.follow(this.m.player.image);
      this.m.player.fixedToCamera = true;
      window.yellow_border = this.game.add.image(0, 0, 'yellow_border');
      window.yellow_border.alpha = 0;
      this.input.createKeys();
      this.game.input.onDown.add(this.input.handleDown, this.input);
      this.game.input.onUp.add(this.input.handleUp, this.input);
      createUI(this);
      this.m.time.myUpdate();
      return this.game.paused = false;
    };

    return Box;

  })();

  $(document).ready(function() {
    boxx = new Box();
    return $(window).resize(boxx.onResize);
  });

  createGame = function() {
    boxx.socket = io.connect('http://' + document.domain + ':' + location.port + '/game');
    boxx.socket.on('map', function(msg) {
      return boxx.myCreate(msg);
    });
    return boxx.game.paused = true;
  };

  update = function() {
    boxx.m.player.image.body.setZeroVelocity();
    boxx.input.handleInput();
    return boxx.m.player.update();
  };

  render = function() {
    var box;
    box = boxx;
    if (box.toDebug) {
      box.debug("playerHP: " + box.m.player.hp);
      box.debug("desktop: " + box.game.device.desktop);
      if (box.m.entitiesL[0]) {
        box.debug("Wolf HP: " + box.m.entitiesL[0].hp);
      }
      box.debug(box.game.time.fps || '--', "#00ff00");
      box.debug("fpsMin: " + box.game.time.fpsMin || '--', "#00ff00");
      return box.renderDebug();
    }
  };

  preload = function() {
    var baseAssetsFolder, box;
    box = boxx;
    baseAssetsFolder = box.properties.baseAssetsFolder;
    box.game.time.advancedTiming = true;
    box.game.load.image('heart', baseAssetsFolder + '/hearth.png');
    box.game.load.image('greeny', baseAssetsFolder + '/character.png');
    box.game.load.image('princess', baseAssetsFolder + '/dragon.png');
    box.game.load.image('potion', baseAssetsFolder + '/potion.png');
    box.game.load.image('grass', baseAssetsFolder + '/grass.png');
    box.game.load.image('dirt', baseAssetsFolder + '/dirt.png');
    box.game.load.image('debug_button', baseAssetsFolder + '/debug_button.png');
    box.game.load.image('fullscreen_button', baseAssetsFolder + '/fullscreen_button.png');
    box.game.load.image('yellow_border', baseAssetsFolder + '/yellow_border.png');
    box.game.load.image('controller_ball', baseAssetsFolder + '/controller_ball.png');
    box.game.load.image('controller_ball_r', baseAssetsFolder + '/controller_ball_r.png');
    box.game.load.image('controller_base', baseAssetsFolder + '/controller_base.png');
    box.game.load.image('controller_base_r', baseAssetsFolder + '/controller_base_r.png');
    return box.game.load.image('tileset', baseAssetsFolder + '/tileset.png');
  };

}).call(this);

//# sourceMappingURL=index.js.map
